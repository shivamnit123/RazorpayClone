{"version":3,"file":"gitlog.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  execFile,\n  execFileSync,\n  ExecFileSyncOptions,\n  ExecFileException,\n} from \"child_process\";\nimport { existsSync } from \"fs\";\nimport createDebugger from \"debug\";\n\nconst debug = createDebugger(\"gitlog\");\n\nconst delimiter = \"\\t\";\nconst fieldMap = {\n  hash: \"%H\",\n  abbrevHash: \"%h\",\n  treeHash: \"%T\",\n  abbrevTreeHash: \"%t\",\n  parentHashes: \"%P\",\n  abbrevParentHashes: \"%P\",\n  authorName: \"%an\",\n  authorEmail: \"%ae\",\n  authorDate: \"%ai\",\n  authorDateRel: \"%ar\",\n  committerName: \"%cn\",\n  committerEmail: \"%ce\",\n  committerDate: \"%cd\",\n  committerDateRel: \"%cr\",\n  subject: \"%s\",\n  body: \"%b\",\n  rawBody: \"%B\",\n  tag: \"%D\",\n} as const;\nexport type CommitField = keyof typeof fieldMap;\n\nconst notOptFields = [\"status\", \"files\"] as const;\ntype NotOptField = (typeof notOptFields)[number];\n\nexport interface FileLineRange {\n  /** Will be pass as -L <startLine>,<endLine>:<file> */\n\n  /** The file to get the commits for */\n  file: string;\n  /** The number of the first line in the desired range */\n  startLine: number;\n  /**\n   * Either the absolute line number for the end of the desired range,\n   * or the offset from the startLine\n   */\n  endLine: number | string;\n}\n\nconst defaultFields = [\n  \"abbrevHash\",\n  \"hash\",\n  \"subject\",\n  \"authorName\",\n  \"authorDate\",\n] as const;\ntype DefaultField = (typeof defaultFields)[number];\n\nexport interface GitlogOptions<Fields extends string = DefaultField> {\n  /** The location of the repo */\n  repo: string;\n  /**\n   * Much more likely to set status codes to 'C' if files are exact copies of each other.\n   *\n   * @default false\n   */\n  findCopiesHarder?: boolean;\n  /**\n   * Find commits on all branches instead of just on the current one.\n   *\n   * @default false\n   */\n  all?: boolean;\n  /**\n   * Pass the -m option to includes files in a merge commit\n   *\n   * @default false\n   */\n  includeMergeCommitFiles?: boolean;\n  /**\n   * The number of commits to return\n   *\n   * @default 10\n   */\n  number?: number;\n  /** An array of fields to return from the log */\n  fields?: readonly Fields[];\n  /**\n   * Below fields was returned from the log:\n   *\n   * - files - changed files names (array)\n   * - status - changed files status (array)\n   *\n   * @default true\n   */\n  nameStatus?: boolean;\n  /**\n   * Show only commits in the specified branch or revision range.\n   * By default uses the current branch and defaults to HEAD (i.e.\n   * the whole history leading to the current commit).\n   */\n  branch?: string;\n  /** Range of lines for a given file to find the commits for */\n  fileLineRange?: FileLineRange;\n  /** File filter for the git log command */\n  file?: string;\n  /** Limit the commits output to ones with author header lines that match the specified pattern. */\n  author?: string;\n  /** Limit the commits output to ones with committer header lines that match the specified pattern. */\n  committer?: string;\n  /** Show commits more recent than a specific date. */\n  since?: string;\n  /** Show commits more recent than a specific date. */\n  after?: string;\n  /** Show commits older than a specific date */\n  until?: string;\n  /** Show commits older than a specific date */\n  before?: string;\n  /** Specify some options to be passed to the .exec() method */\n  execOptions?: ExecFileSyncOptions;\n}\n\nconst defaultOptions = {\n  number: 10,\n  fields: defaultFields,\n  nameStatus: true,\n  includeMergeCommitFiles: false,\n  findCopiesHarder: false,\n  all: false,\n};\n\n/** Add optional parameter to command */\nfunction addOptionalArguments<Field extends string = DefaultField>(\n  command: string[],\n  options: GitlogOptions<Field>\n) {\n  let commandWithOptions = command;\n  const cmdOptional = [\n    \"author\",\n    \"since\",\n    \"after\",\n    \"until\",\n    \"before\",\n    \"committer\",\n  ] as const;\n\n  for (let i = cmdOptional.length; i--; ) {\n    if (options[cmdOptional[i]]) {\n      commandWithOptions.push(`--${cmdOptional[i]}=${options[cmdOptional[i]]}`);\n    }\n  }\n\n  return commandWithOptions;\n}\n\n/** Parse the output of \"git log\" for commit information */\nconst parseCommits = <T extends string>(\n  commits: string[],\n  fields: readonly T[],\n  nameStatus: boolean\n) => {\n  type Commit = Record<T | NotOptField, any>;\n\n  return commits.map((rawCommit) => {\n    const parts = rawCommit.split(\"@end@\");\n    const commit = parts[0].split(delimiter);\n\n    if (parts[1]) {\n      const parseNameStatus = parts[1].trimLeft().split(\"\\n\");\n\n      // Removes last empty char if exists\n      if (parseNameStatus[parseNameStatus.length - 1] === \"\") {\n        parseNameStatus.pop();\n      }\n\n      // Split each line into it's own delimited array\n      const nameAndStatusDelimited = parseNameStatus.map((d) =>\n        d.split(delimiter)\n      );\n\n      // 0 will always be status, last will be the filename as it is in the commit,\n      // anything in between could be the old name if renamed or copied\n      nameAndStatusDelimited.forEach((item) => {\n        const status = item[0];\n        const tempArr = [status, item[item.length - 1]];\n\n        // If any files in between loop through them\n        for (let i = 1, len = item.length - 1; i < len; i++) {\n          // If status R then add the old filename as a deleted file + status\n          // Other potentials are C for copied but this wouldn't require the original deleting\n          if (status.slice(0, 1) === \"R\") {\n            tempArr.push(\"D\", item[i]);\n          }\n        }\n\n        commit.push(...tempArr);\n      });\n    }\n\n    debug(\"commit\", commit);\n\n    // Remove the first empty char from the array\n    commit.shift();\n\n    const parsed: Partial<Commit> = {};\n\n    if (nameStatus) {\n      // Create arrays for non optional fields if turned on\n      notOptFields.forEach((d) => {\n        parsed[d] = [];\n      });\n    }\n\n    commit.forEach((commitField, index) => {\n      if (fields[index]) {\n        parsed[fields[index]] = commitField;\n      } else if (nameStatus) {\n        const pos = (index - fields.length) % notOptFields.length;\n\n        debug(\n          \"nameStatus\",\n          index - fields.length,\n          notOptFields.length,\n          pos,\n          commitField\n        );\n\n        const arr = parsed[notOptFields[pos]];\n\n        if (Array.isArray(arr)) {\n          arr.push(commitField);\n        }\n      }\n    });\n\n    return parsed as Commit;\n  });\n};\n\n/** Run \"git log\" and return the result as JSON */\nfunction createCommandArguments<\n  T extends CommitField | DefaultField = DefaultField\n>(options: GitlogOptions<T>) {\n  // Start constructing command\n  let command: string[] = [\"log\", \"-l0\"];\n\n  if (options.findCopiesHarder) {\n    command.push(\"--find-copies-harder\");\n  }\n\n  if (options.all) {\n    command.push(\"--all\");\n  }\n\n  if (options.includeMergeCommitFiles) {\n    command.push(\"-m\");\n  }\n\n  command.push(`-n ${options.number}`);\n\n  command = addOptionalArguments(command, options);\n\n  // Start of custom format\n  let prettyArgument: string = \"--pretty=@begin@\";\n\n  // Iterating through the fields and adding them to the custom format\n  if (options.fields) {\n    options.fields.forEach((field) => {\n      if (!fieldMap[field] && !notOptFields.includes(field as any)) {\n        throw new Error(`Unknown field: ${field}`);\n      }\n\n      prettyArgument += delimiter + fieldMap[field];\n    });\n  }\n\n  // Close custom format\n  prettyArgument += \"@end@\";\n  command.push(prettyArgument);\n\n  // Append branch (revision range) if specified\n  if (options.branch) {\n    command.push(options.branch);\n  }\n\n  // File and file status\n  if (options.nameStatus && !options.fileLineRange) {\n    command.push(\"--name-status\");\n  }\n\n  if (options.fileLineRange) {\n    command.push(\n      `-L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`\n    );\n  }\n\n  if (options.file) {\n    command.push(\"--\");\n    command.push(options.file);\n  }\n\n  debug(\"command\", options.execOptions, command);\n\n  return command;\n}\n\ntype GitlogError = ExecFileException | null;\n\ntype CommitBase<Field extends string> = Record<Field, string>;\ntype CommitBaseWithFiles<Field extends string> = Record<\n  Field | \"status\",\n  string\n> & { files: string[] };\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false },\n  cb: (err: GitlogError, commits: CommitBase<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb: (err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false }\n): CommitBase<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>\n): CommitBaseWithFiles<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb?:\n    | ((err: GitlogError, commits: CommitBase<Field>[]) => void)\n    | ((err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void)\n): CommitBase<Field>[] | CommitBaseWithFiles<Field>[] | void {\n  if (!userOptions.repo) {\n    throw new Error(\"Repo required!\");\n  }\n\n  if (!existsSync(userOptions.repo)) {\n    throw new Error(\"Repo location does not exist\");\n  }\n\n  // Set defaults\n  const options = {\n    ...(defaultOptions as any),\n    ...userOptions,\n  };\n  const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\n  const commandArguments = createCommandArguments(options);\n\n  if (!cb) {\n    const stdout = execFileSync(\n      \"git\",\n      commandArguments,\n      execOptions\n    ).toString();\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n    return parseCommits(commits, options.fields, options.nameStatus);\n  }\n\n  execFile(\"git\", commandArguments, execOptions, (err, stdout, stderr) => {\n    debug(\"stdout\", stdout);\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n\n    if (stderr) {\n      err = new Error(stderr);\n    }\n\n    cb(err, parseCommits(commits, options.fields, options.nameStatus));\n  });\n}\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field> & { nameStatus: false }\n): Promise<CommitBase<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBaseWithFiles<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBase<Field>[]> {\n  return new Promise((resolve, reject) => {\n    gitlog(options, (err, commits) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(commits);\n      }\n    });\n  });\n}\n\nexport default gitlog;\n"],"names":["debug","fieldMap","hash","abbrevHash","treeHash","abbrevTreeHash","parentHashes","abbrevParentHashes","authorName","authorEmail","authorDate","authorDateRel","committerName","committerEmail","committerDate","committerDateRel","subject","body","rawBody","tag","notOptFields","defaultOptions","number","fields","nameStatus","includeMergeCommitFiles","findCopiesHarder","all","parseCommits","commits","map","rawCommit","parts","split","commit","parseNameStatus","trimLeft","length","pop","d","forEach","item","status","tempArr","i","len","slice","push","apply","shift","parsed","commitField","index","pos","arr","Array","isArray","gitlog","userOptions","cb","repo","Error","existsSync","options","_extends","execOptions","cwd","commandArguments","command","commandWithOptions","cmdOptional","addOptionalArguments","prettyArgument","field","includes","branch","fileLineRange","startLine","endLine","file","createCommandArguments","execFileSync","toString","execFile","err","stdout","stderr","Promise","resolve","reject"],"mappings":"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"}