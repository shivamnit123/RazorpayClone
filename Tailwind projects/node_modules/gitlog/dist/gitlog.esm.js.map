{"version":3,"file":"gitlog.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  execFile,\n  execFileSync,\n  ExecFileSyncOptions,\n  ExecFileException,\n} from \"child_process\";\nimport { existsSync } from \"fs\";\nimport createDebugger from \"debug\";\n\nconst debug = createDebugger(\"gitlog\");\n\nconst delimiter = \"\\t\";\nconst fieldMap = {\n  hash: \"%H\",\n  abbrevHash: \"%h\",\n  treeHash: \"%T\",\n  abbrevTreeHash: \"%t\",\n  parentHashes: \"%P\",\n  abbrevParentHashes: \"%P\",\n  authorName: \"%an\",\n  authorEmail: \"%ae\",\n  authorDate: \"%ai\",\n  authorDateRel: \"%ar\",\n  committerName: \"%cn\",\n  committerEmail: \"%ce\",\n  committerDate: \"%cd\",\n  committerDateRel: \"%cr\",\n  subject: \"%s\",\n  body: \"%b\",\n  rawBody: \"%B\",\n  tag: \"%D\",\n} as const;\nexport type CommitField = keyof typeof fieldMap;\n\nconst notOptFields = [\"status\", \"files\"] as const;\ntype NotOptField = (typeof notOptFields)[number];\n\nexport interface FileLineRange {\n  /** Will be pass as -L <startLine>,<endLine>:<file> */\n\n  /** The file to get the commits for */\n  file: string;\n  /** The number of the first line in the desired range */\n  startLine: number;\n  /**\n   * Either the absolute line number for the end of the desired range,\n   * or the offset from the startLine\n   */\n  endLine: number | string;\n}\n\nconst defaultFields = [\n  \"abbrevHash\",\n  \"hash\",\n  \"subject\",\n  \"authorName\",\n  \"authorDate\",\n] as const;\ntype DefaultField = (typeof defaultFields)[number];\n\nexport interface GitlogOptions<Fields extends string = DefaultField> {\n  /** The location of the repo */\n  repo: string;\n  /**\n   * Much more likely to set status codes to 'C' if files are exact copies of each other.\n   *\n   * @default false\n   */\n  findCopiesHarder?: boolean;\n  /**\n   * Find commits on all branches instead of just on the current one.\n   *\n   * @default false\n   */\n  all?: boolean;\n  /**\n   * Pass the -m option to includes files in a merge commit\n   *\n   * @default false\n   */\n  includeMergeCommitFiles?: boolean;\n  /**\n   * The number of commits to return\n   *\n   * @default 10\n   */\n  number?: number;\n  /** An array of fields to return from the log */\n  fields?: readonly Fields[];\n  /**\n   * Below fields was returned from the log:\n   *\n   * - files - changed files names (array)\n   * - status - changed files status (array)\n   *\n   * @default true\n   */\n  nameStatus?: boolean;\n  /**\n   * Show only commits in the specified branch or revision range.\n   * By default uses the current branch and defaults to HEAD (i.e.\n   * the whole history leading to the current commit).\n   */\n  branch?: string;\n  /** Range of lines for a given file to find the commits for */\n  fileLineRange?: FileLineRange;\n  /** File filter for the git log command */\n  file?: string;\n  /** Limit the commits output to ones with author header lines that match the specified pattern. */\n  author?: string;\n  /** Limit the commits output to ones with committer header lines that match the specified pattern. */\n  committer?: string;\n  /** Show commits more recent than a specific date. */\n  since?: string;\n  /** Show commits more recent than a specific date. */\n  after?: string;\n  /** Show commits older than a specific date */\n  until?: string;\n  /** Show commits older than a specific date */\n  before?: string;\n  /** Specify some options to be passed to the .exec() method */\n  execOptions?: ExecFileSyncOptions;\n}\n\nconst defaultOptions = {\n  number: 10,\n  fields: defaultFields,\n  nameStatus: true,\n  includeMergeCommitFiles: false,\n  findCopiesHarder: false,\n  all: false,\n};\n\n/** Add optional parameter to command */\nfunction addOptionalArguments<Field extends string = DefaultField>(\n  command: string[],\n  options: GitlogOptions<Field>\n) {\n  let commandWithOptions = command;\n  const cmdOptional = [\n    \"author\",\n    \"since\",\n    \"after\",\n    \"until\",\n    \"before\",\n    \"committer\",\n  ] as const;\n\n  for (let i = cmdOptional.length; i--; ) {\n    if (options[cmdOptional[i]]) {\n      commandWithOptions.push(`--${cmdOptional[i]}=${options[cmdOptional[i]]}`);\n    }\n  }\n\n  return commandWithOptions;\n}\n\n/** Parse the output of \"git log\" for commit information */\nconst parseCommits = <T extends string>(\n  commits: string[],\n  fields: readonly T[],\n  nameStatus: boolean\n) => {\n  type Commit = Record<T | NotOptField, any>;\n\n  return commits.map((rawCommit) => {\n    const parts = rawCommit.split(\"@end@\");\n    const commit = parts[0].split(delimiter);\n\n    if (parts[1]) {\n      const parseNameStatus = parts[1].trimLeft().split(\"\\n\");\n\n      // Removes last empty char if exists\n      if (parseNameStatus[parseNameStatus.length - 1] === \"\") {\n        parseNameStatus.pop();\n      }\n\n      // Split each line into it's own delimited array\n      const nameAndStatusDelimited = parseNameStatus.map((d) =>\n        d.split(delimiter)\n      );\n\n      // 0 will always be status, last will be the filename as it is in the commit,\n      // anything in between could be the old name if renamed or copied\n      nameAndStatusDelimited.forEach((item) => {\n        const status = item[0];\n        const tempArr = [status, item[item.length - 1]];\n\n        // If any files in between loop through them\n        for (let i = 1, len = item.length - 1; i < len; i++) {\n          // If status R then add the old filename as a deleted file + status\n          // Other potentials are C for copied but this wouldn't require the original deleting\n          if (status.slice(0, 1) === \"R\") {\n            tempArr.push(\"D\", item[i]);\n          }\n        }\n\n        commit.push(...tempArr);\n      });\n    }\n\n    debug(\"commit\", commit);\n\n    // Remove the first empty char from the array\n    commit.shift();\n\n    const parsed: Partial<Commit> = {};\n\n    if (nameStatus) {\n      // Create arrays for non optional fields if turned on\n      notOptFields.forEach((d) => {\n        parsed[d] = [];\n      });\n    }\n\n    commit.forEach((commitField, index) => {\n      if (fields[index]) {\n        parsed[fields[index]] = commitField;\n      } else if (nameStatus) {\n        const pos = (index - fields.length) % notOptFields.length;\n\n        debug(\n          \"nameStatus\",\n          index - fields.length,\n          notOptFields.length,\n          pos,\n          commitField\n        );\n\n        const arr = parsed[notOptFields[pos]];\n\n        if (Array.isArray(arr)) {\n          arr.push(commitField);\n        }\n      }\n    });\n\n    return parsed as Commit;\n  });\n};\n\n/** Run \"git log\" and return the result as JSON */\nfunction createCommandArguments<\n  T extends CommitField | DefaultField = DefaultField\n>(options: GitlogOptions<T>) {\n  // Start constructing command\n  let command: string[] = [\"log\", \"-l0\"];\n\n  if (options.findCopiesHarder) {\n    command.push(\"--find-copies-harder\");\n  }\n\n  if (options.all) {\n    command.push(\"--all\");\n  }\n\n  if (options.includeMergeCommitFiles) {\n    command.push(\"-m\");\n  }\n\n  command.push(`-n ${options.number}`);\n\n  command = addOptionalArguments(command, options);\n\n  // Start of custom format\n  let prettyArgument: string = \"--pretty=@begin@\";\n\n  // Iterating through the fields and adding them to the custom format\n  if (options.fields) {\n    options.fields.forEach((field) => {\n      if (!fieldMap[field] && !notOptFields.includes(field as any)) {\n        throw new Error(`Unknown field: ${field}`);\n      }\n\n      prettyArgument += delimiter + fieldMap[field];\n    });\n  }\n\n  // Close custom format\n  prettyArgument += \"@end@\";\n  command.push(prettyArgument);\n\n  // Append branch (revision range) if specified\n  if (options.branch) {\n    command.push(options.branch);\n  }\n\n  // File and file status\n  if (options.nameStatus && !options.fileLineRange) {\n    command.push(\"--name-status\");\n  }\n\n  if (options.fileLineRange) {\n    command.push(\n      `-L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`\n    );\n  }\n\n  if (options.file) {\n    command.push(\"--\");\n    command.push(options.file);\n  }\n\n  debug(\"command\", options.execOptions, command);\n\n  return command;\n}\n\ntype GitlogError = ExecFileException | null;\n\ntype CommitBase<Field extends string> = Record<Field, string>;\ntype CommitBaseWithFiles<Field extends string> = Record<\n  Field | \"status\",\n  string\n> & { files: string[] };\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false },\n  cb: (err: GitlogError, commits: CommitBase<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb: (err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false }\n): CommitBase<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>\n): CommitBaseWithFiles<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb?:\n    | ((err: GitlogError, commits: CommitBase<Field>[]) => void)\n    | ((err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void)\n): CommitBase<Field>[] | CommitBaseWithFiles<Field>[] | void {\n  if (!userOptions.repo) {\n    throw new Error(\"Repo required!\");\n  }\n\n  if (!existsSync(userOptions.repo)) {\n    throw new Error(\"Repo location does not exist\");\n  }\n\n  // Set defaults\n  const options = {\n    ...(defaultOptions as any),\n    ...userOptions,\n  };\n  const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\n  const commandArguments = createCommandArguments(options);\n\n  if (!cb) {\n    const stdout = execFileSync(\n      \"git\",\n      commandArguments,\n      execOptions\n    ).toString();\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n    return parseCommits(commits, options.fields, options.nameStatus);\n  }\n\n  execFile(\"git\", commandArguments, execOptions, (err, stdout, stderr) => {\n    debug(\"stdout\", stdout);\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n\n    if (stderr) {\n      err = new Error(stderr);\n    }\n\n    cb(err, parseCommits(commits, options.fields, options.nameStatus));\n  });\n}\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field> & { nameStatus: false }\n): Promise<CommitBase<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBaseWithFiles<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBase<Field>[]> {\n  return new Promise((resolve, reject) => {\n    gitlog(options, (err, commits) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(commits);\n      }\n    });\n  });\n}\n\nexport default gitlog;\n"],"names":["debug","createDebugger","delimiter","fieldMap","hash","abbrevHash","treeHash","abbrevTreeHash","parentHashes","abbrevParentHashes","authorName","authorEmail","authorDate","authorDateRel","committerName","committerEmail","committerDate","committerDateRel","subject","body","rawBody","tag","notOptFields","defaultFields","defaultOptions","number","fields","nameStatus","includeMergeCommitFiles","findCopiesHarder","all","addOptionalArguments","command","options","commandWithOptions","cmdOptional","i","length","push","parseCommits","commits","map","rawCommit","parts","split","commit","parseNameStatus","trimLeft","pop","nameAndStatusDelimited","d","forEach","item","status","tempArr","len","slice","apply","shift","parsed","commitField","index","pos","arr","Array","isArray","createCommandArguments","prettyArgument","field","includes","Error","branch","fileLineRange","startLine","endLine","file","execOptions","gitlog","userOptions","cb","repo","existsSync","_extends","cwd","commandArguments","stdout","execFileSync","toString","execFile","err","stderr","gitlogPromise","Promise","resolve","reject"],"mappings":"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"}